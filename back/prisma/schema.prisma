generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  email    String @unique
  password String

  name       String @unique
  avatarPath String @default("/uploads/default-avatar.png") @map("avatar_path")

  phone   String @default("")
  address String @default("")

  isAdmin   Boolean @default(false) @map("is_admin")
  orders    Order[]
  reviews   Review[]
  favorites Product[]
}

model Category {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name     String    @unique
  slug     String    @unique
  products Product[]
}

model Product {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name        String
  slug        String    @unique
  images      String[]
  description String
  price       Int
  categoryId  Int?      @map("category_id")
  category    Category? @relation(fields: [categoryId], references: [id])
  user        User?     @relation(fields: [userId], references: [id])
  userId      Int?      @map("user_id")

  characteristics Characteristic[]
  orderItems      OrderItem[]
  reviews         Review[]
}

model Characteristic {
  id        Int     @id @default(autoincrement())
  productId Int     @map("product_id")
  name      String
  value     String
  product   Product @relation(fields: [productId], references: [id])
}

model Review {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  rating Int
  text   String

  user   User @relation(fields: [userId], references: [id])
  userId Int  @map("user_id")

  product   Product @relation(fields: [productId], references: [id])
  productId Int     @map("product_id")
}

model Order {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  status EnumOrderItemStatus @default(NEW)
  items  OrderItem[]
  total Int

  user   User @relation(fields: [userId], references: [id])
  userId Int  @map("user_id")
}

enum EnumOrderItemStatus {
  NEW
  CONFIRMED
  CANCELED
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  quantity Int
  price    Int

  order   Order? @relation(fields: [orderId], references: [id])
  orderId Int?   @map("order_id")

  product   Product? @relation(fields: [productId], references: [id])
  productId Int?     @map("product_id")
}
